/* tslint:disable */
/* eslint-disable */
/**
 * shared-tw API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum Cities {
    Klu = 'KLU',
    Tph = 'TPH',
    Tpe = 'TPE',
    Tyc = 'TYC',
    Hsh = 'HSH',
    Hsc = 'HSC',
    Mal = 'MAL',
    Txg = 'TXG',
    Cwh = 'CWH',
    Nto = 'NTO',
    Ylh = 'YLH',
    Chy = 'CHY',
    Cyi = 'CYI',
    Tnn = 'TNN',
    Khh = 'KHH',
    Lnn = 'LNN',
    Iln = 'ILN',
    Peh = 'PEH',
    Kmn = 'KMN',
    Iuh = 'IUH',
    Ttt = 'TTT',
    Hwa = 'HWA'
}

/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum ContactMethods {
    NotSet = '_not_set_',
    Line = 'line',
    Fb = 'fb',
    Email = 'email'
}

/**
 * 
 * @export
 * @interface Donator
 */
export interface Donator {
    /**
     * 
     * @type {string}
     * @memberof Donator
     */
    phone: string;
    /**
     * 
     * @type {ContactMethods}
     * @memberof Donator
     */
    other_contact_method: ContactMethods;
    /**
     * 
     * @type {string}
     * @memberof Donator
     */
    other_contact: string;
    /**
     * 
     * @type {number}
     * @memberof Donator
     */
    id: number;
}
/**
 * 
 * @export
 * @interface DonatorCreation
 */
export interface DonatorCreation {
    /**
     * 
     * @type {string}
     * @memberof DonatorCreation
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreation
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreation
     */
    confirmed_password: string;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreation
     */
    phone: string;
    /**
     * 
     * @type {ContactMethods}
     * @memberof DonatorCreation
     */
    other_contact_method: ContactMethods;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreation
     */
    other_contact: string;
}
/**
 * 
 * @export
 * @interface GroupedRequiredItems
 */
export interface GroupedRequiredItems {
    /**
     * 
     * @type {OrganizationSummary}
     * @memberof GroupedRequiredItems
     */
    organization: OrganizationSummary;
    /**
     * 
     * @type {Array<RequiredItem>}
     * @memberof GroupedRequiredItems
     */
    items?: Array<RequiredItem>;
}
/**
 * 
 * @export
 * @interface JWTRefreshToken
 */
export interface JWTRefreshToken {
    /**
     * 
     * @type {string}
     * @memberof JWTRefreshToken
     */
    refresh: string;
}
/**
 * 
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
    /**
     * 
     * @type {string}
     * @memberof JWTToken
     */
    access: string;
    /**
     * 
     * @type {string}
     * @memberof JWTToken
     */
    refresh?: string;
}
/**
 * 
 * @export
 * @interface JWTTokenCreation
 */
export interface JWTTokenCreation {
    /**
     * 
     * @type {string}
     * @memberof JWTTokenCreation
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof JWTTokenCreation
     */
    password: string;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * 
     * @type {OrganizationTypes}
     * @memberof Organization
     */
    type: OrganizationTypes;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    type_other: string;
    /**
     * 
     * @type {Cities}
     * @memberof Organization
     */
    city: Cities;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    office_hours: string;
    /**
     * 
     * @type {ContactMethods}
     * @memberof Organization
     */
    other_contact_method: ContactMethods;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    other_contact: string;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    id: number;
}
/**
 * 
 * @export
 * @interface OrganizationCreation
 */
export interface OrganizationCreation {
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    confirmed_password: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    name: string;
    /**
     * 
     * @type {OrganizationTypes}
     * @memberof OrganizationCreation
     */
    type: OrganizationTypes;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    type_other: string;
    /**
     * 
     * @type {Cities}
     * @memberof OrganizationCreation
     */
    city: Cities;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    office_hours: string;
    /**
     * 
     * @type {ContactMethods}
     * @memberof OrganizationCreation
     */
    other_contact_method: ContactMethods;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreation
     */
    other_contact: string;
}
/**
 * 
 * @export
 * @interface OrganizationSummary
 */
export interface OrganizationSummary {
    /**
     * 
     * @type {string}
     * @memberof OrganizationSummary
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationSummary
     */
    name: string;
    /**
     * 
     * @type {Cities}
     * @memberof OrganizationSummary
     */
    city: Cities;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum OrganizationTypes {
    Hospital = 'hospital',
    FireDepartment = 'fire_department',
    PoliceStation = 'police_station',
    Other = 'other'
}

/**
 * 
 * @export
 * @interface PaginatedResponseSchemaGroupedRequiredItems
 */
export interface PaginatedResponseSchemaGroupedRequiredItems {
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseSchemaGroupedRequiredItems
     */
    count: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedResponseSchemaGroupedRequiredItems
     */
    next?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedResponseSchemaGroupedRequiredItems
     */
    previous?: string;
    /**
     * 
     * @type {Array<GroupedRequiredItems>}
     * @memberof PaginatedResponseSchemaGroupedRequiredItems
     */
    results: Array<GroupedRequiredItems>;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaRequiredItem
 */
export interface PaginatedResponseSchemaRequiredItem {
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseSchemaRequiredItem
     */
    count: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedResponseSchemaRequiredItem
     */
    next?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedResponseSchemaRequiredItem
     */
    previous?: string;
    /**
     * 
     * @type {Array<RequiredItem>}
     * @memberof PaginatedResponseSchemaRequiredItem
     */
    results: Array<RequiredItem>;
}
/**
 * 
 * @export
 * @interface RequiredItem
 */
export interface RequiredItem {
    /**
     * 
     * @type {string}
     * @memberof RequiredItem
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RequiredItem
     */
    amount: number;
    /**
     * 
     * @type {Units}
     * @memberof RequiredItem
     */
    unit: Units;
    /**
     * 
     * @type {string}
     * @memberof RequiredItem
     */
    ended_date: string;
    /**
     * 
     * @type {string}
     * @memberof RequiredItem
     */
    id: string;
}
/**
 * 
 * @export
 * @interface RequiredItemCreation
 */
export interface RequiredItemCreation {
    /**
     * 
     * @type {string}
     * @memberof RequiredItemCreation
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RequiredItemCreation
     */
    amount: number;
    /**
     * 
     * @type {Units}
     * @memberof RequiredItemCreation
     */
    unit: Units;
    /**
     * 
     * @type {string}
     * @memberof RequiredItemCreation
     */
    ended_date: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum Units {
    Piece = 'piece',
    Set = 'set'
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Jwt Token
         * @param {JWTTokenCreation} jWTTokenCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticatorApiCreateJwtToken: async (jWTTokenCreation: JWTTokenCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jWTTokenCreation' is not null or undefined
            assertParamExists('authenticatorApiCreateJwtToken', 'jWTTokenCreation', jWTTokenCreation)
            const localVarPath = `/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jWTTokenCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Jwt Token
         * @param {JWTRefreshToken} jWTRefreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticatorApiRefreshJwtToken: async (jWTRefreshToken: JWTRefreshToken, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jWTRefreshToken' is not null or undefined
            assertParamExists('authenticatorApiRefreshJwtToken', 'jWTRefreshToken', jWTRefreshToken)
            const localVarPath = `/auth/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jWTRefreshToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Jwt Token
         * @param {JWTTokenCreation} jWTTokenCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticatorApiCreateJwtToken(jWTTokenCreation: JWTTokenCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticatorApiCreateJwtToken(jWTTokenCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Jwt Token
         * @param {JWTRefreshToken} jWTRefreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticatorApiRefreshJwtToken(jWTRefreshToken: JWTRefreshToken, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticatorApiRefreshJwtToken(jWTRefreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Jwt Token
         * @param {JWTTokenCreation} jWTTokenCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticatorApiCreateJwtToken(jWTTokenCreation: JWTTokenCreation, options?: any): AxiosPromise<JWTToken> {
            return localVarFp.authenticatorApiCreateJwtToken(jWTTokenCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Jwt Token
         * @param {JWTRefreshToken} jWTRefreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticatorApiRefreshJwtToken(jWTRefreshToken: JWTRefreshToken, options?: any): AxiosPromise<void> {
            return localVarFp.authenticatorApiRefreshJwtToken(jWTRefreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Create Jwt Token
     * @param {JWTTokenCreation} jWTTokenCreation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticatorApiCreateJwtToken(jWTTokenCreation: JWTTokenCreation, options?: any) {
        return AuthenticationApiFp(this.configuration).authenticatorApiCreateJwtToken(jWTTokenCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Jwt Token
     * @param {JWTRefreshToken} jWTRefreshToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticatorApiRefreshJwtToken(jWTRefreshToken: JWTRefreshToken, options?: any) {
        return AuthenticationApiFp(this.configuration).authenticatorApiRefreshJwtToken(jWTRefreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Donator
         * @param {DonatorCreation} donatorCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiCreateDonator: async (donatorCreation: DonatorCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'donatorCreation' is not null or undefined
            assertParamExists('shareApiCreateDonator', 'donatorCreation', donatorCreation)
            const localVarPath = `/register/donator/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donatorCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Organization
         * @param {OrganizationCreation} organizationCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiCreateOrganization: async (organizationCreation: OrganizationCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreation' is not null or undefined
            assertParamExists('shareApiCreateOrganization', 'organizationCreation', organizationCreation)
            const localVarPath = `/register/organization/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Organization Required Item
         * @param {RequiredItemCreation} requiredItemCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiCreateOrganizationRequiredItem: async (requiredItemCreation: RequiredItemCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requiredItemCreation' is not null or undefined
            assertParamExists('shareApiCreateOrganizationRequiredItem', 'requiredItemCreation', requiredItemCreation)
            const localVarPath = `/organization-required-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requiredItemCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Organization Required Items
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiListOrganizationRequiredItems: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization-required-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Required Items
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiListRequiredItems: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/required-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Donator
         * @param {DonatorCreation} donatorCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareApiCreateDonator(donatorCreation: DonatorCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Donator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareApiCreateDonator(donatorCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Organization
         * @param {OrganizationCreation} organizationCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareApiCreateOrganization(organizationCreation: OrganizationCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareApiCreateOrganization(organizationCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Organization Required Item
         * @param {RequiredItemCreation} requiredItemCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareApiCreateOrganizationRequiredItem(requiredItemCreation: RequiredItemCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequiredItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareApiCreateOrganizationRequiredItem(requiredItemCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Organization Required Items
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareApiListOrganizationRequiredItems(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaRequiredItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareApiListOrganizationRequiredItems(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Required Items
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareApiListRequiredItems(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaGroupedRequiredItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareApiListRequiredItems(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Donator
         * @param {DonatorCreation} donatorCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiCreateDonator(donatorCreation: DonatorCreation, options?: any): AxiosPromise<Donator> {
            return localVarFp.shareApiCreateDonator(donatorCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Organization
         * @param {OrganizationCreation} organizationCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiCreateOrganization(organizationCreation: OrganizationCreation, options?: any): AxiosPromise<Organization> {
            return localVarFp.shareApiCreateOrganization(organizationCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Organization Required Item
         * @param {RequiredItemCreation} requiredItemCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiCreateOrganizationRequiredItem(requiredItemCreation: RequiredItemCreation, options?: any): AxiosPromise<RequiredItem> {
            return localVarFp.shareApiCreateOrganizationRequiredItem(requiredItemCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Organization Required Items
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiListOrganizationRequiredItems(page?: number, options?: any): AxiosPromise<PaginatedResponseSchemaRequiredItem> {
            return localVarFp.shareApiListOrganizationRequiredItems(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Required Items
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareApiListRequiredItems(page?: number, options?: any): AxiosPromise<PaginatedResponseSchemaGroupedRequiredItems> {
            return localVarFp.shareApiListRequiredItems(page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Donator
     * @param {DonatorCreation} donatorCreation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareApiCreateDonator(donatorCreation: DonatorCreation, options?: any) {
        return DefaultApiFp(this.configuration).shareApiCreateDonator(donatorCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Organization
     * @param {OrganizationCreation} organizationCreation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareApiCreateOrganization(organizationCreation: OrganizationCreation, options?: any) {
        return DefaultApiFp(this.configuration).shareApiCreateOrganization(organizationCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Organization Required Item
     * @param {RequiredItemCreation} requiredItemCreation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareApiCreateOrganizationRequiredItem(requiredItemCreation: RequiredItemCreation, options?: any) {
        return DefaultApiFp(this.configuration).shareApiCreateOrganizationRequiredItem(requiredItemCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Organization Required Items
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareApiListOrganizationRequiredItems(page?: number, options?: any) {
        return DefaultApiFp(this.configuration).shareApiListOrganizationRequiredItems(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Required Items
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareApiListRequiredItems(page?: number, options?: any) {
        return DefaultApiFp(this.configuration).shareApiListRequiredItems(page, options).then((request) => request(this.axios, this.basePath));
    }
}


