/* tslint:disable */
/* eslint-disable */
/**
 * shared-tw APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */
export enum CityEnum {
    Klu = 'KLU',
    Tph = 'TPH',
    Tpe = 'TPE',
    Tyc = 'TYC',
    Hsh = 'HSH',
    Hsc = 'HSC',
    Mal = 'MAL',
    Txg = 'TXG',
    Cwh = 'CWH',
    Nto = 'NTO',
    Ylh = 'YLH',
    Chy = 'CHY',
    Cyi = 'CYI',
    Tnn = 'TNN',
    Khh = 'KHH',
    Lnn = 'LNN',
    Iln = 'ILN',
    Peh = 'PEH',
    Kmn = 'KMN',
    Iuh = 'IUH',
    Ttt = 'TTT',
    Hwa = 'HWA'
}

/**
 * 
 * @export
 * @interface Donator
 */
export interface Donator {
    /**
     * 
     * @type {number}
     * @memberof Donator
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Donator
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Donator
     */
    phone: string;
    /**
     * 
     * @type {OtherContactMethodEnum}
     * @memberof Donator
     */
    other_contact_method: OtherContactMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof Donator
     */
    other_contact: string;
}
/**
 * 
 * @export
 * @interface DonatorCreationRequest
 */
export interface DonatorCreationRequest {
    /**
     * 
     * @type {string}
     * @memberof DonatorCreationRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreationRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreationRequest
     */
    confirmed_password: string;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreationRequest
     */
    phone: string;
    /**
     * 
     * @type {OtherContactMethodEnum}
     * @memberof DonatorCreationRequest
     */
    other_contact_method: OtherContactMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof DonatorCreationRequest
     */
    other_contact: string;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    username: string;
    /**
     * 
     * @type {TypeEnum}
     * @memberof Organization
     */
    type: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    type_other: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * 
     * @type {CityEnum}
     * @memberof Organization
     */
    city: CityEnum;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    office_hours: string;
    /**
     * 
     * @type {OtherContactMethodEnum}
     * @memberof Organization
     */
    other_contact_method: OtherContactMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    other_contact: string;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    user: number;
}
/**
 * 
 * @export
 * @interface OrganizationCreationRequest
 */
export interface OrganizationCreationRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    confirmed_password: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    name: string;
    /**
     * 
     * @type {TypeEnum}
     * @memberof OrganizationCreationRequest
     */
    type: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    type_other: string;
    /**
     * 
     * @type {CityEnum}
     * @memberof OrganizationCreationRequest
     */
    city: CityEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    office_hours: string;
    /**
     * 
     * @type {OtherContactMethodEnum}
     * @memberof OrganizationCreationRequest
     */
    other_contact_method: OtherContactMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreationRequest
     */
    other_contact: string;
}
/**
 * 
 * @export
 * @interface OrganizationSummary
 */
export interface OrganizationSummary {
    /**
     * 
     * @type {TypeEnum}
     * @memberof OrganizationSummary
     */
    type: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationSummary
     */
    name: string;
    /**
     * 
     * @type {CityEnum}
     * @memberof OrganizationSummary
     */
    city: CityEnum;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum OtherContactMethodEnum {
    NotSet = '_not_set_',
    Line = 'line',
    Fb = 'fb',
    Email = 'email'
}

/**
 * 
 * @export
 * @interface PaginatedRequiredItemList
 */
export interface PaginatedRequiredItemList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRequiredItemList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRequiredItemList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRequiredItemList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<RequiredItem>}
     * @memberof PaginatedRequiredItemList
     */
    results?: Array<RequiredItem>;
}
/**
 * 
 * @export
 * @interface RequiredItem
 */
export interface RequiredItem {
    /**
     * 
     * @type {number}
     * @memberof RequiredItem
     */
    id: number;
    /**
     * 
     * @type {OrganizationSummary}
     * @memberof RequiredItem
     */
    organization: OrganizationSummary;
    /**
     * 
     * @type {string}
     * @memberof RequiredItem
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RequiredItem
     */
    amount: number;
    /**
     * 
     * @type {UnitEnum}
     * @memberof RequiredItem
     */
    unit: UnitEnum;
    /**
     * 
     * @type {string}
     * @memberof RequiredItem
     */
    ended_date: string;
}
/**
 * 
 * @export
 * @interface RequiredItemRequest
 */
export interface RequiredItemRequest {
    /**
     * 
     * @type {string}
     * @memberof RequiredItemRequest
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RequiredItemRequest
     */
    amount: number;
    /**
     * 
     * @type {UnitEnum}
     * @memberof RequiredItemRequest
     */
    unit: UnitEnum;
    /**
     * 
     * @type {string}
     * @memberof RequiredItemRequest
     */
    ended_date: string;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    access: string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    refresh: string;
}
/**
 * 
 * @export
 * @interface TokenObtainPairRequest
 */
export interface TokenObtainPairRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    access: string;
}
/**
 * 
 * @export
 * @interface TokenRefreshRequest
 */
export interface TokenRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshRequest
     */
    refresh: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TypeEnum {
    Hospital = 'hospital',
    FireDepartment = 'fire_department',
    PoliceStation = 'police_station',
    Other = 'other'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitEnum {
    Piece = 'piece',
    Set = 'set'
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequest} tokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenCreate: async (tokenObtainPairRequest: TokenObtainPairRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenObtainPairRequest' is not null or undefined
            assertParamExists('authTokenCreate', 'tokenObtainPairRequest', tokenObtainPairRequest)
            const localVarPath = `/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenObtainPairRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenRefreshCreate: async (tokenRefreshRequest: TokenRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshRequest' is not null or undefined
            assertParamExists('authTokenRefreshCreate', 'tokenRefreshRequest', tokenRefreshRequest)
            const localVarPath = `/auth/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequest} tokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenCreate(tokenObtainPairRequest: TokenObtainPairRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPair>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTokenCreate(tokenObtainPairRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTokenRefreshCreate(tokenRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequest} tokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenCreate(tokenObtainPairRequest: TokenObtainPairRequest, options?: any): AxiosPromise<TokenObtainPair> {
            return localVarFp.authTokenCreate(tokenObtainPairRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: any): AxiosPromise<TokenRefresh> {
            return localVarFp.authTokenRefreshCreate(tokenRefreshRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPairRequest} tokenObtainPairRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTokenCreate(tokenObtainPairRequest: TokenObtainPairRequest, options?: any) {
        return AuthApiFp(this.configuration).authTokenCreate(tokenObtainPairRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefreshRequest} tokenRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTokenRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: any) {
        return AuthApiFp(this.configuration).authTokenRefreshCreate(tokenRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OpenapiApi - axios parameter creator
 * @export
 */
export const OpenapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapiSchemaRetrieve: async (format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenapiApi - functional programming interface
 * @export
 */
export const OpenapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenapiApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openapiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openapiSchemaRetrieve(format, lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OpenapiApi - factory interface
 * @export
 */
export const OpenapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenapiApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.openapiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpenapiApi - object-oriented interface
 * @export
 * @class OpenapiApi
 * @extends {BaseAPI}
 */
export class OpenapiApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'json' | 'yaml'} [format] 
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenapiApi
     */
    public openapiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any) {
        return OpenapiApiFp(this.configuration).openapiSchemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationRequiredItemsApi - axios parameter creator
 * @export
 */
export const OrganizationRequiredItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RequiredItemRequest} requiredItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRequiredItemsCreate: async (requiredItemRequest: RequiredItemRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requiredItemRequest' is not null or undefined
            assertParamExists('organizationRequiredItemsCreate', 'requiredItemRequest', requiredItemRequest)
            const localVarPath = `/organization-required-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requiredItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRequiredItemsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization-required-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationRequiredItemsApi - functional programming interface
 * @export
 */
export const OrganizationRequiredItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationRequiredItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RequiredItemRequest} requiredItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRequiredItemsCreate(requiredItemRequest: RequiredItemRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequiredItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationRequiredItemsCreate(requiredItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRequiredItemsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRequiredItemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationRequiredItemsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationRequiredItemsApi - factory interface
 * @export
 */
export const OrganizationRequiredItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationRequiredItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {RequiredItemRequest} requiredItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRequiredItemsCreate(requiredItemRequest: RequiredItemRequest, options?: any): AxiosPromise<RequiredItem> {
            return localVarFp.organizationRequiredItemsCreate(requiredItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRequiredItemsList(page?: number, options?: any): AxiosPromise<PaginatedRequiredItemList> {
            return localVarFp.organizationRequiredItemsList(page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationRequiredItemsApi - object-oriented interface
 * @export
 * @class OrganizationRequiredItemsApi
 * @extends {BaseAPI}
 */
export class OrganizationRequiredItemsApi extends BaseAPI {
    /**
     * 
     * @param {RequiredItemRequest} requiredItemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRequiredItemsApi
     */
    public organizationRequiredItemsCreate(requiredItemRequest: RequiredItemRequest, options?: any) {
        return OrganizationRequiredItemsApiFp(this.configuration).organizationRequiredItemsCreate(requiredItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRequiredItemsApi
     */
    public organizationRequiredItemsList(page?: number, options?: any) {
        return OrganizationRequiredItemsApiFp(this.configuration).organizationRequiredItemsList(page, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DonatorCreationRequest} donatorCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDonatorCreate: async (donatorCreationRequest: DonatorCreationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'donatorCreationRequest' is not null or undefined
            assertParamExists('registerDonatorCreate', 'donatorCreationRequest', donatorCreationRequest)
            const localVarPath = `/register/donator/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donatorCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationCreationRequest} organizationCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrganizationCreate: async (organizationCreationRequest: OrganizationCreationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreationRequest' is not null or undefined
            assertParamExists('registerOrganizationCreate', 'organizationCreationRequest', organizationCreationRequest)
            const localVarPath = `/register/organization/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DonatorCreationRequest} donatorCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDonatorCreate(donatorCreationRequest: DonatorCreationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Donator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerDonatorCreate(donatorCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OrganizationCreationRequest} organizationCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerOrganizationCreate(organizationCreationRequest: OrganizationCreationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerOrganizationCreate(organizationCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterApiFp(configuration)
    return {
        /**
         * 
         * @param {DonatorCreationRequest} donatorCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDonatorCreate(donatorCreationRequest: DonatorCreationRequest, options?: any): AxiosPromise<Donator> {
            return localVarFp.registerDonatorCreate(donatorCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationCreationRequest} organizationCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrganizationCreate(organizationCreationRequest: OrganizationCreationRequest, options?: any): AxiosPromise<Organization> {
            return localVarFp.registerOrganizationCreate(organizationCreationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @param {DonatorCreationRequest} donatorCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public registerDonatorCreate(donatorCreationRequest: DonatorCreationRequest, options?: any) {
        return RegisterApiFp(this.configuration).registerDonatorCreate(donatorCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrganizationCreationRequest} organizationCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public registerOrganizationCreate(organizationCreationRequest: OrganizationCreationRequest, options?: any) {
        return RegisterApiFp(this.configuration).registerOrganizationCreate(organizationCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequiredItemsApi - axios parameter creator
 * @export
 */
export const RequiredItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requiredItemsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/required-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequiredItemsApi - functional programming interface
 * @export
 */
export const RequiredItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequiredItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requiredItemsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRequiredItemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requiredItemsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequiredItemsApi - factory interface
 * @export
 */
export const RequiredItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequiredItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requiredItemsList(page?: number, options?: any): AxiosPromise<PaginatedRequiredItemList> {
            return localVarFp.requiredItemsList(page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequiredItemsApi - object-oriented interface
 * @export
 * @class RequiredItemsApi
 * @extends {BaseAPI}
 */
export class RequiredItemsApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequiredItemsApi
     */
    public requiredItemsList(page?: number, options?: any) {
        return RequiredItemsApiFp(this.configuration).requiredItemsList(page, options).then((request) => request(this.axios, this.basePath));
    }
}


